files:
  "/home/ec2-user/.aliases":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      #!/usr/bin/env bash

      # Detect which `ls` flavor is in use
      if ls --color > /dev/null 2>&1; then # GNU `ls`
        colorflag="--color"
        export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
      else # macOS `ls`
        colorflag="-G"
        export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
      fi

      alias ls="ls -F ${colorflag}"
      alias grep='grep --color=auto'

  "/root/.aliases":
    mode: "000644"
    content : |
      #!/usr/bin/env bash

      # Detect which `ls` flavor is in use
      if ls --color > /dev/null 2>&1; then # GNU `ls`
        colorflag="--color"
        export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
      else # macOS `ls`
        colorflag="-G"
        export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
      fi

      alias ls="ls -F ${colorflag}"
      alias grep='grep --color=auto'

  "/home/ec2-user/.bash_profile":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      # .bash_profile

      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
        . ~/.bashrc
      fi

      # User specific environment and startup programs

      PATH=$PATH:$HOME/.local/bin:$HOME/bin

      export PATH

      for file in $HOME/.{path,bash_prompt,exports,aliases}; do
        [ -r "$file" ] && [ -f "$file" ] && source "$file";
      done;
      unset file;

  "/root/.bash_profile":
    mode: "000644"
    content : |
      # .bash_profile

      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
        . ~/.bashrc
      fi

      # User specific environment and startup programs

      PATH=$PATH:$HOME/bin

      export PATH

      for file in $HOME/.{path,bash_prompt,exports,aliases}; do
        [ -r "$file" ] && [ -f "$file" ] && source "$file";
      done;
      unset file;

  "/home/ec2-user/.bash_prompt":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      #!/usr/bin/env bash

      # Shell prompt based on the Solarized Dark theme.
      # Screenshot: http://i.imgur.com/EkEtphC.png
      # Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
      # iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

      if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM='gnome-256color';
      elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM='xterm-256color';
      fi;

      prompt_git() {
        local s='';
        local branchName='';

        # Check if the current directory is in a Git repository.
        if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

          # check if the current directory is in .git before running git checks
          if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
              s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
              s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
              s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
              s+='$';
            fi;
          fi;

          # Get the short symbolic ref.
          # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
          # Otherwise, just give up.
          branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

          [ -n "${s}" ] && s=" [${s}]";

          echo -e "${1}${branchName}${2}${s}";
        else
          return;
        fi;
      }

      if tput setaf 1 &> /dev/null; then
        tput sgr0; # reset colors
        bold=$(tput bold);
        reset=$(tput sgr0);
        # Solarized colors, taken from http://git.io/solarized-colors.
        black=$(tput setaf 0);
        blue=$(tput setaf 33);
        cyan=$(tput setaf 37);
        green=$(tput setaf 64);
        orange=$(tput setaf 166);
        purple=$(tput setaf 125);
        red=$(tput setaf 124);
        violet=$(tput setaf 61);
        white=$(tput setaf 15);
        yellow=$(tput setaf 136);
      else
        bold='';
        reset="\e[0m";
        black="\e[1;30m";
        blue="\e[1;34m";
        cyan="\e[1;36m";
        green="\e[1;32m";
        orange="\e[1;33m";
        purple="\e[1;35m";
        red="\e[1;31m";
        violet="\e[1;35m";
        white="\e[1;37m";
        yellow="\e[1;33m";
      fi;

      # Highlight the user name when logged in as root.
      if [[ "${USER}" == "root" ]]; then
        userStyle="${red}";
      else
        userStyle="${orange}";
      fi;

      # Set the terminal and prompt.
      PS1="\[\033]0;\W\007\]"; # working directory base name
      PS1+="\[${bold}\]"; # newline
      PS1+="\[${userStyle}\]\u"; # username
      PS1+="\[${white}\]@";
      PS1+="\[${bold}${red}\]\h"; # host
      PS1+="\[${white}\]:";
      PS1+="\[${white}\]\w"; # working directory full path
      PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
      PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
      export PS1;

      PS2="\[${yellow}\]→ \[${reset}\]";
      export PS2;

  "/root/.bash_prompt":
    mode: "000644"
    content : |
      #!/usr/bin/env bash

      # Shell prompt based on the Solarized Dark theme.
      # Screenshot: http://i.imgur.com/EkEtphC.png
      # Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
      # iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

      if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM='gnome-256color';
      elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM='xterm-256color';
      fi;

      prompt_git() {
        local s='';
        local branchName='';
        # Check if the current directory is in a Git repository.
        if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

          # check if the current directory is in .git before running git checks
          if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
              s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
              s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
              s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
              s+='$';
            fi;
          fi;

          # Get the short symbolic ref.
          # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
          # Otherwise, just give up.
          branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

          [ -n "${s}" ] && s=" [${s}]";

          echo -e "${1}${branchName}${2}${s}";
        else
          return;
        fi;
      }

      if tput setaf 1 &> /dev/null; then
        tput sgr0; # reset colors
        bold=$(tput bold);
        reset=$(tput sgr0);
        # Solarized colors, taken from http://git.io/solarized-colors.
        black=$(tput setaf 0);
        blue=$(tput setaf 33);
        cyan=$(tput setaf 37);
        green=$(tput setaf 64);
        orange=$(tput setaf 166);
        purple=$(tput setaf 125);
        red=$(tput setaf 124);
        violet=$(tput setaf 61);
        white=$(tput setaf 15);
        yellow=$(tput setaf 136);
      else
        bold='';
        reset="\e[0m";
        black="\e[1;30m";
        blue="\e[1;34m";
        cyan="\e[1;36m";
        green="\e[1;32m";
        orange="\e[1;33m";
        purple="\e[1;35m";
        red="\e[1;31m";
        violet="\e[1;35m";
        white="\e[1;37m";
        yellow="\e[1;33m";
      fi;

      # Highlight the user name when logged in as root.
      if [[ "${USER}" == "root" ]]; then
        userStyle="${red}";
      else
        userStyle="${orange}";
      fi;

      # Set the terminal and prompt.
      PS1="\[\033]0;\W\007\]"; # working directory base name
      PS1+="\[${bold}\]"; # newline
      PS1+="\[${userStyle}\]\u"; # username
      PS1+="\[${white}\]@";
      PS1+="\[${bold}${red}\]\h"; # host
      PS1+="\[${white}\]:";
      PS1+="\[${white}\]\w"; # working directory full path
      PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
      PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
      export PS1;

      PS2="\[${yellow}\]→ \[${reset}\]";
      export PS2;

  "/home/ec2-user/.exports":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      #!/usr/bin/env bash

      # Make vim the default editor.
      export EDITOR='vim';

      # Enable persistent REPL history for `node`.
      export NODE_REPL_HISTORY=~/.node_history;
      # Allow 32³ entries; the default is 1000.
      export NODE_REPL_HISTORY_SIZE='32768';
      # Use sloppy mode by default, matching web browsers.
      export NODE_REPL_MODE='sloppy';

      # Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
      export PYTHONIOENCODING='UTF-8';

      # Increase Bash history size. Allow 32³ entries; the default is 500.
      export HISTSIZE='9999999';
      export HISTFILESIZE="${HISTSIZE}";
      # Omit duplicates and commands that begin with a space from history.
      export HISTCONTROL='ignoreboth';

      # Prefer US English and use UTF-8.
      export LANG='en_US.UTF-8';
      export LC_ALL='en_US.UTF-8';

      # Highlight section titles in manual pages.
      export LESS_TERMCAP_md="${yellow}";

      # Don’t clear the screen after quitting a manual page.
      export MANPAGER='less -X';

  "/root/.exports":
    mode: "000644"
    content : |
      #!/usr/bin/env bash

      # Make vim the default editor.
      export EDITOR='vim';

      # Enable persistent REPL history for `node`.
      export NODE_REPL_HISTORY=~/.node_history;
      # Allow 32³ entries; the default is 1000.
      export NODE_REPL_HISTORY_SIZE='32768';
      # Use sloppy mode by default, matching web browsers.
      export NODE_REPL_MODE='sloppy';

      # Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
      export PYTHONIOENCODING='UTF-8';

      # Increase Bash history size. Allow 32³ entries; the default is 500.
      export HISTSIZE='9999999';
      export HISTFILESIZE="${HISTSIZE}";
      # Omit duplicates and commands that begin with a space from history.
      export HISTCONTROL='ignoreboth';

      # Prefer US English and use UTF-8.
      export LANG='en_US.UTF-8';
      export LC_ALL='en_US.UTF-8';

      # Highlight section titles in manual pages.
      export LESS_TERMCAP_md="${yellow}";

      # Don’t clear the screen after quitting a manual page.
      export MANPAGER='less -X';

  "/home/ec2-user/.irbrc":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      require 'irb/ext/save-history'
      #History configuration
      IRB.conf[:SAVE_HISTORY] = 100
      IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"

  "/root/.irbrc":
    mode: "000644"
    content : |
      require 'irb/ext/save-history'
      #History configuration
      IRB.conf[:SAVE_HISTORY] = 100
      IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"

  "/home/ec2-user/.screenrc":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      # Disable the startup message
      startup_message off

      # Set a large scrollback buffer
      defscrollback 32000

      # Always start `screen` with UTF-8 enabled (`screen -U`)
      defutf8 on

  "/root/.screenrc":
    mode: "000644"
    content : |
      # Disable the startup message
      startup_message off

      # Set a large scrollback buffer
      defscrollback 32000

      # Always start `screen` with UTF-8 enabled (`screen -U`)
      defutf8 on

  "/home/ec2-user/.vimrc":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content : |
      set background=dark

      " Make Vim more useful
      set nocompatible
      " Enhance command-line completion
      set wildmenu
      " Allow cursor keys in insert mode
      set esckeys
      " Optimize for fast terminal connections
      set ttyfast
      " Add the g flag to search/replace by default
      set gdefault
      " Use UTF-8 without BOM
      set encoding=utf-8 nobomb
      " Change mapleader
      let mapleader=","
      " Don’t add empty newlines at the end of files
      set binary
      set noeol

      " Don’t create backups when editing files in certain directories
      set backupskip=/tmp/*,/private/tmp/*

      " Respect modeline in files
      set modeline
      set modelines=4
      " Enable per-directory .vimrc files and disable unsafe commands in them
      set exrc
      set secure
      " Enable syntax highlighting
      syntax on
      " Highlight current line
      set cursorline
      " Make tabs as wide as two spaces
      set tabstop=2
      " Highlight searches
      set hlsearch
      " Ignore case of searches
      set ignorecase
      " Highlight dynamically as pattern is typed
      set incsearch
      " Always show status line
      set laststatus=2
      " Disable error bells
      set noerrorbells
      " Don’t reset cursor to start of line when moving around.
      set nostartofline
      " Show the cursor position
      set ruler
      " Don’t show the intro message when starting Vim
      set shortmess=atI
      " Show the current mode
      set showmode
      " Show the filename in the window titlebar
      set title
      " Show the (partial) command as it’s being typed
      set showcmd
      " Start scrolling three lines before the horizontal window border
      set scrolloff=3

      " Strip trailing whitespace (,ss)
      function! StripWhitespace()
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        :%s/\s\+$//e
        call setpos('.', save_cursor)
        call setreg('/', old_query)
      endfunction
      noremap <leader>ss :call StripWhitespace()<CR>
      " Save a file as root (,W)
      noremap <leader>W :w !sudo tee % > /dev/null<CR>

      " Automatic commands
      if has("autocmd")
        " Enable file type detection
        filetype on
        " Treat .json files as .js
        autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
        " Treat .md files as Markdown
        autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
      endif

  "/root/.vimrc":
    mode: "000644"
    content : |
      set background=dark

      " Make Vim more useful
      set nocompatible
      " Enhance command-line completion
      set wildmenu
      " Allow cursor keys in insert mode
      set esckeys
      " Optimize for fast terminal connections
      set ttyfast
      " Add the g flag to search/replace by default
      set gdefault
      " Use UTF-8 without BOM
      set encoding=utf-8 nobomb
      " Change mapleader
      let mapleader=","
      " Don’t add empty newlines at the end of files
      set binary
      set noeol

      " Don’t create backups when editing files in certain directories
      set backupskip=/tmp/*,/private/tmp/*

      " Respect modeline in files
      set modeline
      set modelines=4
      " Enable per-directory .vimrc files and disable unsafe commands in them
      set exrc
      set secure
      " Enable syntax highlighting
      syntax on
      " Highlight current line
      set cursorline
      " Make tabs as wide as two spaces
      set tabstop=2
      " Highlight searches
      set hlsearch
      " Ignore case of searches
      set ignorecase
      " Highlight dynamically as pattern is typed
      set incsearch
      " Always show status line
      set laststatus=2
      " Disable error bells
      set noerrorbells
      " Don’t reset cursor to start of line when moving around.
      set nostartofline
      " Show the cursor position
      set ruler
      " Don’t show the intro message when starting Vim
      set shortmess=atI
      " Show the current mode
      set showmode
      " Show the filename in the window titlebar
      set title
      " Show the (partial) command as it’s being typed
      set showcmd
      " Start scrolling three lines before the horizontal window border
      set scrolloff=3

      " Strip trailing whitespace (,ss)
      function! StripWhitespace()
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        :%s/\s\+$//e
        call setpos('.', save_cursor)
        call setreg('/', old_query)
      endfunction
      noremap <leader>ss :call StripWhitespace()<CR>
      " Save a file as root (,W)
      noremap <leader>W :w !sudo tee % > /dev/null<CR>

      " Automatic commands
      if has("autocmd")
        " Enable file type detection
        filetype on
        " Treat .json files as .js
        autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
        " Treat .md files as Markdown
        autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
      endif